#!/usr/bin/env python
# -*- encoding:utf8 -*-

import sys
import os.path as path
from cStringIO import StringIO
from string import strip

import json
import plugin_pb2
import google.protobuf.descriptor_pb2 as descriptor_pb2

FDP = plugin_pb2.descriptor_pb2.FieldDescriptorProto

if sys.platform == "win32":
    import msvcrt, os
    msvcrt.setmode(sys.stdin.fileno(), os.O_BINARY)
    msvcrt.setmode(sys.stdout.fileno(), os.O_BINARY)

class Project:
	def __init__(self):
		self.modulelist = []

	def getModule(self,package):
		for m in self.modulelist:
			if m['package'] == package:
				return m
		return None

class Module:
	def __init__(self):
		self.package = ''
		self.messagelist = []
		self.enumlist = []

class Message:
	def __init__(self):
		self.name = ''
		self.fieldlist = []
		self.enumlist = []
		self.nestedtypelist = []

class Enum:
	def __init__(self):
		self.name = ''
		self.valuelist = []

class EnumValue:
	def __init__(self, enumvalue_desc):
		self.name = enumvalue_desc.name
		self.number = enumvalue_desc.number

class Field:
	def __init__(self, field_desc):
		self.name = field_desc.name
		self.number = field_desc.number
		self.label = field_desc.label
		self.type = field_desc.type


def export_message(msg, msg_desc):
	for field_desc in msg_desc.field:
		field = Field(field_desc)
		msg.fieldlist.append(field.__dict__)
	sorted(msg.fieldlist, key=lambda d:d['number'])

	for msg_nested_desc in msg_desc.nested_type:
		nested_msg = Message()
		nested_msg.name = msg_nested_desc.name
		export_message(nested_msg, msg_nested_desc)
		msg.nestedtypelist.append(nested_msg.__dict__)

	for msg_enum_desc in msg_desc.enum_type:
		enum = Enum()
		enum.name = msg_enum_desc.name
		for enumvalue_desc in msg_enum_desc.value:
			enumvalue = EnumValue(enumvalue_desc)
			enum.valuelist.append(enumvalue.__dict__)

		msg.enumlist.append(enum.__dict__)


def main():
	plugin_require_bin = sys.stdin.read()
	code_gen_req = plugin_pb2.CodeGeneratorRequest()
	code_gen_req.ParseFromString(plugin_require_bin)

	proj = Project();
	content = '';	
	for proto_file in code_gen_req.proto_file:
		module = proj.getModule(proto_file.package);
		if module == None:
			newmodule = Module()
			newmodule.package = proto_file.package
			module = newmodule.__dict__
			proj.modulelist.append(module)

		for enum_desc in proto_file.enum_type:
			enum = Enum()
			enum.name = enum_desc.name
			module['enumlist'].append(enum.__dict__)

		for msg_desc in proto_file.message_type:
			msg = Message()	
			msg.name = msg_desc.name
			export_message(msg, msg_desc)
			module['messagelist'].append(msg.__dict__)

		for sc in proto_file.source_code_info.location:
			if len(sc.trailing_comments):
				content += str(sc.path)
				content += (sc.trailing_comments)

	content += '\n\n\n\n\n' 

	code_generated = plugin_pb2.CodeGeneratorResponse()

	file_desc = code_generated.file.add()
	file_desc.name = 'parse.json'
	file_desc.content = json.dumps(proj.__dict__, ensure_ascii = False, sort_keys=True, indent=4)

	file_desc = code_generated.file.add()
	file_desc.name = 'log1.txt'
	file_desc.content = content + str(code_gen_req)

	sys.stdout.write(code_generated.SerializeToString())			

if __name__ == "__main__":
    main()

