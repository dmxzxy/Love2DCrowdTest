
import sys
import os
from cStringIO import StringIO

ALL_CONFIG_NAME = "GameConfigs"

_files = {}

def type_name():
    return 'lua'

def my_path():
    return '/lua/Config/GameConfigs'

def dev_folder_rel():
    return "Config.GameConfig"

class Writer(object):
    def __init__(self, prefix=None):
        self.io = StringIO()
        self.__indent = ''
        self.__prefix = prefix

    def getvalue(self):
        return self.io.getvalue()

    def getindent(self):
        return self.__indent

    def __enter__(self):
        self.__indent += '    '
        return self

    def __exit__(self, type, value, trackback):
        self.__indent = self.__indent[:-4]

    def __call__(self, data):
        self.io.write(self.__indent)
        if self.__prefix:
            self.io.write(self.__prefix)
        self.io.write(data)

def addHepler(name):
    s  = "function %s.get(id)\n"%name
    s += "  return %s[\"items\"][tostring(id)];\n"%name
    s += "end\n"
    return s

def gen_all_config(lua_folder):
    lua_all_config_path = lua_folder + "/" + ALL_CONFIG_NAME + ".lua"
    all_lua_name = []
    
    for root, dirs, files in os.walk(lua_folder): 
        for f in files: 
            file_path = os.path.join(root, f) 
            file_name = os.path.basename(f)
            file_name,file_suffix = os.path.splitext(file_name)
            if file_suffix == ".lua":
                if file_name != ALL_CONFIG_NAME :
                    all_lua_name.append(file_name)
    f = file(lua_all_config_path,"w")
    f.write("%s = {}\n"%(ALL_CONFIG_NAME))
    for name in all_lua_name:
        f.write("%s = require \"%s.%s\"\n"%(name,dev_folder_rel(),name))
        f.write(addHepler(name));
        f.write("%s.%s = %s\n"%(ALL_CONFIG_NAME,name,name))
    f.close()


def write_header(writer):
    writer("""-- Generated By Tool Do not Edit
""")

def is_skip( scheme ) :
    if cmp( scheme, '' ) == 0 :
        return True
    elif cmp( scheme, '$' ) == 0 :
        return True
    elif cmp( scheme.upper(), 'SKIP' ) == 0 :
        return True
    return False

def try_fromat_int( data ) :
    try:
        if type(data) == type(list()):
            for i in range(len(data)):
                data[i] = int(data[i])
            return data

        array_value = eval(data);
        return array_value;
    except:
        a_int_value = 0
        try:
            a_int_value = int(float(data))
        except:
            return 0
    return a_int_value

def try_format_string( data ) :
    try:
        array_value = eval(data);
        return array_value;
    except:
        pass

    return data

def try_format_array( data ) :
    try:
        array_value = eval(data);
        return array_value;
    except:
        return list();

    return list();

def try_format_value( typeStr, nameStr, data ) :
    if typeStr.lower() == "int":
        return try_fromat_int(data)
    elif typeStr.lower() == "string":
        return try_format_string(data)
    elif typeStr.lower() == "lang":
        return try_format_string(data)
    elif typeStr.lower() == "array":
        return try_format_array(data)

def code_gen_field(key, value):
    with Writer() as field_context:
        if key == None :
            if type(value) == type(1):
                field_context('%d,\n'%(value))
            elif type(value) == type("s"):
                field_context('"%s",\n'%(value))
            elif type(value) == type(u's'):
                field_context(('"%s",\n'%(value)).encode('utf-8'))
            elif type(value) == type(list()):
                field_context(('{\n'))
                list_fields = []
                for v in value:
                    list_fields.append(code_gen_field(None, v))
                map(field_context, list_fields)
                field_context('},\n')
        else:
            if type(value) == type(1):
                field_context('["%s"] = %d,\n'%(key,value))
            elif type(value) == type("s"):
                field_context('["%s"] = "%s",\n'%(key,value))
            elif type(value) == type(u's'):
                field_context(('["%s"] = "%s",\n'%(key,value)).encode('utf-8'))
            elif type(value) == type(list()):
                field_context(('["%s"] = {\n'%(key)).encode('utf-8'))
                list_fields = []
                for v in value:
                    list_fields.append(code_gen_field(None, v))
                map(field_context, list_fields)
                field_context('},\n')

    return field_context.getvalue()

def code_gen_datas(data_desc, config_desc):
    with Writer() as context:
        version = data_desc.version
        key = data_desc.key
        content = data_desc.content
        context(('["%s"] = {\n'%key).encode('utf-8'))
        _data = []
        for j in range(0, len(config_desc.attrs)):
            attr_type = config_desc.attrs[j].type
            attr_name = config_desc.attrs[j].name
            if is_skip(attr_type):
                continue
            data = code_gen_field(attr_name, try_format_value(attr_type, attr_name, content[j]))
            _data.append(data);

        map(context, _data)
        context('},\n')

    return context.getvalue()

def code_gen_file(file_desc):
    for config in file_desc.configs:
        context = Writer()
        write_header(context)
        context('local %s = {\n'%config.name)

        _datas = [];
        for i in range(0, len(config.attr_datas)):
            data = config.attr_datas[i]
            _datas.append(code_gen_datas(data, config))

        map(context, _datas)
        context('}\nreturn %s\n'%config.name)
        _files[config.name + '.lua'] = context.getvalue()

def gen_code(req, toPath):
    print '.........start gen type : '+type_name()+'..........'
    gen_path = toPath + my_path()
    if not os.path.exists( gen_path ) :
        os.makedirs(gen_path)

    #clean up dir
    for filename in os.listdir(gen_path) :
        name, suffix = filename.split( '.' )
        if  suffix == 'lua' :
            os.remove(gen_path+"/"+filename)

    for file_desc in req.files:
        code_gen_file(file_desc)

    for k,v in _files.iteritems():
        f = file(gen_path+'/'+k,"w")
        f.write(v);
        f.close()

    gen_all_config(gen_path)

    print '.........end gen type : '+type_name()+'............'



if __name__ == "__main__" :
    from descriptor import *
    files = ['../xls/test.xlsm']
    code_gen_requrest = CodeGenerateRequest(files, '1.1')
    gen_code(code_gen_requrest, './')